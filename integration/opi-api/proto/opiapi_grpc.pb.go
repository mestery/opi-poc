// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/opiapi.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OPIAPIClient is the client API for OPIAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OPIAPIClient interface {
	GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error)
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*Empty, error)
}

type oPIAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewOPIAPIClient(cc grpc.ClientConnInterface) OPIAPIClient {
	return &oPIAPIClient{cc}
}

func (c *oPIAPIClient) GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error) {
	out := new(GetNetworkResponse)
	err := c.cc.Invoke(ctx, "/proto.OPIAPI/GetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oPIAPIClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.OPIAPI/CreateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OPIAPIServer is the server API for OPIAPI service.
// All implementations must embed UnimplementedOPIAPIServer
// for forward compatibility
type OPIAPIServer interface {
	GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error)
	CreateNetwork(context.Context, *CreateNetworkRequest) (*Empty, error)
	mustEmbedUnimplementedOPIAPIServer()
}

// UnimplementedOPIAPIServer must be embedded to have forward compatible implementations.
type UnimplementedOPIAPIServer struct {
}

func (UnimplementedOPIAPIServer) GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (UnimplementedOPIAPIServer) CreateNetwork(context.Context, *CreateNetworkRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedOPIAPIServer) mustEmbedUnimplementedOPIAPIServer() {}

// UnsafeOPIAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OPIAPIServer will
// result in compilation errors.
type UnsafeOPIAPIServer interface {
	mustEmbedUnimplementedOPIAPIServer()
}

func RegisterOPIAPIServer(s grpc.ServiceRegistrar, srv OPIAPIServer) {
	s.RegisterService(&OPIAPI_ServiceDesc, srv)
}

func _OPIAPI_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OPIAPIServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OPIAPI/GetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OPIAPIServer).GetNetwork(ctx, req.(*GetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OPIAPI_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OPIAPIServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OPIAPI/CreateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OPIAPIServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OPIAPI_ServiceDesc is the grpc.ServiceDesc for OPIAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OPIAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OPIAPI",
	HandlerType: (*OPIAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetwork",
			Handler:    _OPIAPI_GetNetwork_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _OPIAPI_CreateNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/opiapi.proto",
}
